// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v5.29.3
// source: uexecutor/v1/types.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "uexecutor.v1";

export enum VerificationType {
  signedVerification = 0,
  universalTxVerification = 1,
  UNRECOGNIZED = -1,
}

export function verificationTypeFromJSON(object: any): VerificationType {
  switch (object) {
    case 0:
    case "signedVerification":
      return VerificationType.signedVerification;
    case 1:
    case "universalTxVerification":
      return VerificationType.universalTxVerification;
    case -1:
    case "UNRECOGNIZED":
    default:
      return VerificationType.UNRECOGNIZED;
  }
}

export function verificationTypeToJSON(object: VerificationType): string {
  switch (object) {
    case VerificationType.signedVerification:
      return "signedVerification";
    case VerificationType.universalTxVerification:
      return "universalTxVerification";
    case VerificationType.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export enum UniversalTxStatus {
  UNIVERSAL_TX_STATUS_UNSPECIFIED = 0,
  INBOUND_SUCCESS = 1,
  PENDING_INBOUND_EXECUTION = 2,
  PC_EXECUTED_SUCCESS = 3,
  PC_EXECUTED_FAILED = 4,
  PC_PENDING_REVERT = 5,
  OUTBOUND_PENDING = 6,
  OUTBOUND_SUCCESS = 7,
  OUTBOUND_FAILED = 8,
  CANCELED = 9,
  UNRECOGNIZED = -1,
}

export function universalTxStatusFromJSON(object: any): UniversalTxStatus {
  switch (object) {
    case 0:
    case "UNIVERSAL_TX_STATUS_UNSPECIFIED":
      return UniversalTxStatus.UNIVERSAL_TX_STATUS_UNSPECIFIED;
    case 1:
    case "INBOUND_SUCCESS":
      return UniversalTxStatus.INBOUND_SUCCESS;
    case 2:
    case "PENDING_INBOUND_EXECUTION":
      return UniversalTxStatus.PENDING_INBOUND_EXECUTION;
    case 3:
    case "PC_EXECUTED_SUCCESS":
      return UniversalTxStatus.PC_EXECUTED_SUCCESS;
    case 4:
    case "PC_EXECUTED_FAILED":
      return UniversalTxStatus.PC_EXECUTED_FAILED;
    case 5:
    case "PC_PENDING_REVERT":
      return UniversalTxStatus.PC_PENDING_REVERT;
    case 6:
    case "OUTBOUND_PENDING":
      return UniversalTxStatus.OUTBOUND_PENDING;
    case 7:
    case "OUTBOUND_SUCCESS":
      return UniversalTxStatus.OUTBOUND_SUCCESS;
    case 8:
    case "OUTBOUND_FAILED":
      return UniversalTxStatus.OUTBOUND_FAILED;
    case 9:
    case "CANCELED":
      return UniversalTxStatus.CANCELED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return UniversalTxStatus.UNRECOGNIZED;
  }
}

export function universalTxStatusToJSON(object: UniversalTxStatus): string {
  switch (object) {
    case UniversalTxStatus.UNIVERSAL_TX_STATUS_UNSPECIFIED:
      return "UNIVERSAL_TX_STATUS_UNSPECIFIED";
    case UniversalTxStatus.INBOUND_SUCCESS:
      return "INBOUND_SUCCESS";
    case UniversalTxStatus.PENDING_INBOUND_EXECUTION:
      return "PENDING_INBOUND_EXECUTION";
    case UniversalTxStatus.PC_EXECUTED_SUCCESS:
      return "PC_EXECUTED_SUCCESS";
    case UniversalTxStatus.PC_EXECUTED_FAILED:
      return "PC_EXECUTED_FAILED";
    case UniversalTxStatus.PC_PENDING_REVERT:
      return "PC_PENDING_REVERT";
    case UniversalTxStatus.OUTBOUND_PENDING:
      return "OUTBOUND_PENDING";
    case UniversalTxStatus.OUTBOUND_SUCCESS:
      return "OUTBOUND_SUCCESS";
    case UniversalTxStatus.OUTBOUND_FAILED:
      return "OUTBOUND_FAILED";
    case UniversalTxStatus.CANCELED:
      return "CANCELED";
    case UniversalTxStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface UniversalPayload {
  to: string;
  value: string;
  data: string;
  gasLimit: string;
  maxFeePerGas: string;
  maxPriorityFeePerGas: string;
  nonce: string;
  deadline: string;
  vType: VerificationType;
}

export interface Inbound {
  sourceChain: string;
  txHash: string;
  sender: string;
  recipient: string;
  amount: string;
  assetAddr: string;
  txType: number;
  universalPayload?: UniversalPayload | undefined;
  verificationData: string;
}

export interface PCTx {
  txHash: string;
  sender: string;
  gasUsed: number;
  blockHeight: number;
  status: string;
  errorMsg: string;
}

export interface OutboundTx {
  destinationChain: string;
  txHash: string;
  recipient: string;
  amount: string;
  assetAddr: string;
}

export interface UniversalTx {
  inboundTx?: Inbound | undefined;
  pcTx: PCTx[];
  outboundTx?: OutboundTx | undefined;
  universalStatus: UniversalTxStatus;
}

function createBaseUniversalPayload(): UniversalPayload {
  return {
    to: "",
    value: "",
    data: "",
    gasLimit: "",
    maxFeePerGas: "",
    maxPriorityFeePerGas: "",
    nonce: "",
    deadline: "",
    vType: 0,
  };
}

export const UniversalPayload: MessageFns<UniversalPayload> = {
  encode(message: UniversalPayload, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.to !== "") {
      writer.uint32(10).string(message.to);
    }
    if (message.value !== "") {
      writer.uint32(18).string(message.value);
    }
    if (message.data !== "") {
      writer.uint32(26).string(message.data);
    }
    if (message.gasLimit !== "") {
      writer.uint32(34).string(message.gasLimit);
    }
    if (message.maxFeePerGas !== "") {
      writer.uint32(42).string(message.maxFeePerGas);
    }
    if (message.maxPriorityFeePerGas !== "") {
      writer.uint32(50).string(message.maxPriorityFeePerGas);
    }
    if (message.nonce !== "") {
      writer.uint32(58).string(message.nonce);
    }
    if (message.deadline !== "") {
      writer.uint32(66).string(message.deadline);
    }
    if (message.vType !== 0) {
      writer.uint32(72).int32(message.vType);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UniversalPayload {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniversalPayload();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.to = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.value = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.data = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.gasLimit = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.maxFeePerGas = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.maxPriorityFeePerGas = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.deadline = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.vType = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniversalPayload {
    return {
      to: isSet(object.to) ? globalThis.String(object.to) : "",
      value: isSet(object.value) ? globalThis.String(object.value) : "",
      data: isSet(object.data) ? globalThis.String(object.data) : "",
      gasLimit: isSet(object.gasLimit) ? globalThis.String(object.gasLimit) : "",
      maxFeePerGas: isSet(object.maxFeePerGas) ? globalThis.String(object.maxFeePerGas) : "",
      maxPriorityFeePerGas: isSet(object.maxPriorityFeePerGas) ? globalThis.String(object.maxPriorityFeePerGas) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
      deadline: isSet(object.deadline) ? globalThis.String(object.deadline) : "",
      vType: isSet(object.vType) ? verificationTypeFromJSON(object.vType) : 0,
    };
  },

  toJSON(message: UniversalPayload): unknown {
    const obj: any = {};
    if (message.to !== "") {
      obj.to = message.to;
    }
    if (message.value !== "") {
      obj.value = message.value;
    }
    if (message.data !== "") {
      obj.data = message.data;
    }
    if (message.gasLimit !== "") {
      obj.gasLimit = message.gasLimit;
    }
    if (message.maxFeePerGas !== "") {
      obj.maxFeePerGas = message.maxFeePerGas;
    }
    if (message.maxPriorityFeePerGas !== "") {
      obj.maxPriorityFeePerGas = message.maxPriorityFeePerGas;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    if (message.deadline !== "") {
      obj.deadline = message.deadline;
    }
    if (message.vType !== 0) {
      obj.vType = verificationTypeToJSON(message.vType);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniversalPayload>, I>>(base?: I): UniversalPayload {
    return UniversalPayload.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniversalPayload>, I>>(object: I): UniversalPayload {
    const message = createBaseUniversalPayload();
    message.to = object.to ?? "";
    message.value = object.value ?? "";
    message.data = object.data ?? "";
    message.gasLimit = object.gasLimit ?? "";
    message.maxFeePerGas = object.maxFeePerGas ?? "";
    message.maxPriorityFeePerGas = object.maxPriorityFeePerGas ?? "";
    message.nonce = object.nonce ?? "";
    message.deadline = object.deadline ?? "";
    message.vType = object.vType ?? 0;
    return message;
  },
};

function createBaseInbound(): Inbound {
  return {
    sourceChain: "",
    txHash: "",
    sender: "",
    recipient: "",
    amount: "",
    assetAddr: "",
    txType: 0,
    universalPayload: undefined,
    verificationData: "",
  };
}

export const Inbound: MessageFns<Inbound> = {
  encode(message: Inbound, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.sourceChain !== "") {
      writer.uint32(10).string(message.sourceChain);
    }
    if (message.txHash !== "") {
      writer.uint32(18).string(message.txHash);
    }
    if (message.sender !== "") {
      writer.uint32(26).string(message.sender);
    }
    if (message.recipient !== "") {
      writer.uint32(34).string(message.recipient);
    }
    if (message.amount !== "") {
      writer.uint32(42).string(message.amount);
    }
    if (message.assetAddr !== "") {
      writer.uint32(50).string(message.assetAddr);
    }
    if (message.txType !== 0) {
      writer.uint32(56).int32(message.txType);
    }
    if (message.universalPayload !== undefined) {
      UniversalPayload.encode(message.universalPayload, writer.uint32(66).fork()).join();
    }
    if (message.verificationData !== "") {
      writer.uint32(74).string(message.verificationData);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Inbound {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInbound();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.sourceChain = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.assetAddr = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 56) {
            break;
          }

          message.txType = reader.int32();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.universalPayload = UniversalPayload.decode(reader, reader.uint32());
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.verificationData = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Inbound {
    return {
      sourceChain: isSet(object.sourceChain) ? globalThis.String(object.sourceChain) : "",
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      assetAddr: isSet(object.assetAddr) ? globalThis.String(object.assetAddr) : "",
      txType: isSet(object.txType) ? globalThis.Number(object.txType) : 0,
      universalPayload: isSet(object.universalPayload) ? UniversalPayload.fromJSON(object.universalPayload) : undefined,
      verificationData: isSet(object.verificationData) ? globalThis.String(object.verificationData) : "",
    };
  },

  toJSON(message: Inbound): unknown {
    const obj: any = {};
    if (message.sourceChain !== "") {
      obj.sourceChain = message.sourceChain;
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.assetAddr !== "") {
      obj.assetAddr = message.assetAddr;
    }
    if (message.txType !== 0) {
      obj.txType = Math.round(message.txType);
    }
    if (message.universalPayload !== undefined) {
      obj.universalPayload = UniversalPayload.toJSON(message.universalPayload);
    }
    if (message.verificationData !== "") {
      obj.verificationData = message.verificationData;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Inbound>, I>>(base?: I): Inbound {
    return Inbound.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Inbound>, I>>(object: I): Inbound {
    const message = createBaseInbound();
    message.sourceChain = object.sourceChain ?? "";
    message.txHash = object.txHash ?? "";
    message.sender = object.sender ?? "";
    message.recipient = object.recipient ?? "";
    message.amount = object.amount ?? "";
    message.assetAddr = object.assetAddr ?? "";
    message.txType = object.txType ?? 0;
    message.universalPayload = (object.universalPayload !== undefined && object.universalPayload !== null)
      ? UniversalPayload.fromPartial(object.universalPayload)
      : undefined;
    message.verificationData = object.verificationData ?? "";
    return message;
  },
};

function createBasePCTx(): PCTx {
  return { txHash: "", sender: "", gasUsed: 0, blockHeight: 0, status: "", errorMsg: "" };
}

export const PCTx: MessageFns<PCTx> = {
  encode(message: PCTx, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.txHash !== "") {
      writer.uint32(10).string(message.txHash);
    }
    if (message.sender !== "") {
      writer.uint32(18).string(message.sender);
    }
    if (message.gasUsed !== 0) {
      writer.uint32(24).uint64(message.gasUsed);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(32).uint64(message.blockHeight);
    }
    if (message.status !== "") {
      writer.uint32(50).string(message.status);
    }
    if (message.errorMsg !== "") {
      writer.uint32(58).string(message.errorMsg);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): PCTx {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePCTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.sender = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gasUsed = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.status = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.errorMsg = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PCTx {
    return {
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      sender: isSet(object.sender) ? globalThis.String(object.sender) : "",
      gasUsed: isSet(object.gasUsed) ? globalThis.Number(object.gasUsed) : 0,
      blockHeight: isSet(object.blockHeight) ? globalThis.Number(object.blockHeight) : 0,
      status: isSet(object.status) ? globalThis.String(object.status) : "",
      errorMsg: isSet(object.errorMsg) ? globalThis.String(object.errorMsg) : "",
    };
  },

  toJSON(message: PCTx): unknown {
    const obj: any = {};
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.sender !== "") {
      obj.sender = message.sender;
    }
    if (message.gasUsed !== 0) {
      obj.gasUsed = Math.round(message.gasUsed);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.status !== "") {
      obj.status = message.status;
    }
    if (message.errorMsg !== "") {
      obj.errorMsg = message.errorMsg;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PCTx>, I>>(base?: I): PCTx {
    return PCTx.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PCTx>, I>>(object: I): PCTx {
    const message = createBasePCTx();
    message.txHash = object.txHash ?? "";
    message.sender = object.sender ?? "";
    message.gasUsed = object.gasUsed ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    message.status = object.status ?? "";
    message.errorMsg = object.errorMsg ?? "";
    return message;
  },
};

function createBaseOutboundTx(): OutboundTx {
  return { destinationChain: "", txHash: "", recipient: "", amount: "", assetAddr: "" };
}

export const OutboundTx: MessageFns<OutboundTx> = {
  encode(message: OutboundTx, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.destinationChain !== "") {
      writer.uint32(10).string(message.destinationChain);
    }
    if (message.txHash !== "") {
      writer.uint32(18).string(message.txHash);
    }
    if (message.recipient !== "") {
      writer.uint32(26).string(message.recipient);
    }
    if (message.amount !== "") {
      writer.uint32(34).string(message.amount);
    }
    if (message.assetAddr !== "") {
      writer.uint32(42).string(message.assetAddr);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): OutboundTx {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseOutboundTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.destinationChain = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.txHash = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.recipient = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.amount = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.assetAddr = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): OutboundTx {
    return {
      destinationChain: isSet(object.destinationChain) ? globalThis.String(object.destinationChain) : "",
      txHash: isSet(object.txHash) ? globalThis.String(object.txHash) : "",
      recipient: isSet(object.recipient) ? globalThis.String(object.recipient) : "",
      amount: isSet(object.amount) ? globalThis.String(object.amount) : "",
      assetAddr: isSet(object.assetAddr) ? globalThis.String(object.assetAddr) : "",
    };
  },

  toJSON(message: OutboundTx): unknown {
    const obj: any = {};
    if (message.destinationChain !== "") {
      obj.destinationChain = message.destinationChain;
    }
    if (message.txHash !== "") {
      obj.txHash = message.txHash;
    }
    if (message.recipient !== "") {
      obj.recipient = message.recipient;
    }
    if (message.amount !== "") {
      obj.amount = message.amount;
    }
    if (message.assetAddr !== "") {
      obj.assetAddr = message.assetAddr;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<OutboundTx>, I>>(base?: I): OutboundTx {
    return OutboundTx.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<OutboundTx>, I>>(object: I): OutboundTx {
    const message = createBaseOutboundTx();
    message.destinationChain = object.destinationChain ?? "";
    message.txHash = object.txHash ?? "";
    message.recipient = object.recipient ?? "";
    message.amount = object.amount ?? "";
    message.assetAddr = object.assetAddr ?? "";
    return message;
  },
};

function createBaseUniversalTx(): UniversalTx {
  return { inboundTx: undefined, pcTx: [], outboundTx: undefined, universalStatus: 0 };
}

export const UniversalTx: MessageFns<UniversalTx> = {
  encode(message: UniversalTx, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.inboundTx !== undefined) {
      Inbound.encode(message.inboundTx, writer.uint32(10).fork()).join();
    }
    for (const v of message.pcTx) {
      PCTx.encode(v!, writer.uint32(18).fork()).join();
    }
    if (message.outboundTx !== undefined) {
      OutboundTx.encode(message.outboundTx, writer.uint32(26).fork()).join();
    }
    if (message.universalStatus !== 0) {
      writer.uint32(32).int32(message.universalStatus);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UniversalTx {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUniversalTx();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.inboundTx = Inbound.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pcTx.push(PCTx.decode(reader, reader.uint32()));
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.outboundTx = OutboundTx.decode(reader, reader.uint32());
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.universalStatus = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UniversalTx {
    return {
      inboundTx: isSet(object.inboundTx) ? Inbound.fromJSON(object.inboundTx) : undefined,
      pcTx: globalThis.Array.isArray(object?.pcTx) ? object.pcTx.map((e: any) => PCTx.fromJSON(e)) : [],
      outboundTx: isSet(object.outboundTx) ? OutboundTx.fromJSON(object.outboundTx) : undefined,
      universalStatus: isSet(object.universalStatus) ? universalTxStatusFromJSON(object.universalStatus) : 0,
    };
  },

  toJSON(message: UniversalTx): unknown {
    const obj: any = {};
    if (message.inboundTx !== undefined) {
      obj.inboundTx = Inbound.toJSON(message.inboundTx);
    }
    if (message.pcTx?.length) {
      obj.pcTx = message.pcTx.map((e) => PCTx.toJSON(e));
    }
    if (message.outboundTx !== undefined) {
      obj.outboundTx = OutboundTx.toJSON(message.outboundTx);
    }
    if (message.universalStatus !== 0) {
      obj.universalStatus = universalTxStatusToJSON(message.universalStatus);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UniversalTx>, I>>(base?: I): UniversalTx {
    return UniversalTx.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UniversalTx>, I>>(object: I): UniversalTx {
    const message = createBaseUniversalTx();
    message.inboundTx = (object.inboundTx !== undefined && object.inboundTx !== null)
      ? Inbound.fromPartial(object.inboundTx)
      : undefined;
    message.pcTx = object.pcTx?.map((e) => PCTx.fromPartial(e)) || [];
    message.outboundTx = (object.outboundTx !== undefined && object.outboundTx !== null)
      ? OutboundTx.fromPartial(object.outboundTx)
      : undefined;
    message.universalStatus = object.universalStatus ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
