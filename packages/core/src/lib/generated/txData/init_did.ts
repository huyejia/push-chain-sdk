// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.3
//   protoc               v3.20.3
// source: txData/init_did.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "push";

export interface WalletToEncDerivedKey {
  encDerivedPrivKey: string;
  signature: string;
}

export interface InitDid {
  masterPubKey: string;
  derivedKeyIndex: number;
  derivedPubKey: string;
  walletToEncDerivedKey: { [key: string]: WalletToEncDerivedKey };
}

export interface InitDid_WalletToEncDerivedKeyEntry {
  key: string;
  value: WalletToEncDerivedKey | undefined;
}

function createBaseWalletToEncDerivedKey(): WalletToEncDerivedKey {
  return { encDerivedPrivKey: "", signature: "" };
}

export const WalletToEncDerivedKey = {
  encode(message: WalletToEncDerivedKey, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.encDerivedPrivKey !== "") {
      writer.uint32(10).string(message.encDerivedPrivKey);
    }
    if (message.signature !== "") {
      writer.uint32(18).string(message.signature);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): WalletToEncDerivedKey {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseWalletToEncDerivedKey();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.encDerivedPrivKey = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.signature = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): WalletToEncDerivedKey {
    return {
      encDerivedPrivKey: isSet(object.encDerivedPrivKey) ? globalThis.String(object.encDerivedPrivKey) : "",
      signature: isSet(object.signature) ? globalThis.String(object.signature) : "",
    };
  },

  toJSON(message: WalletToEncDerivedKey): unknown {
    const obj: any = {};
    if (message.encDerivedPrivKey !== "") {
      obj.encDerivedPrivKey = message.encDerivedPrivKey;
    }
    if (message.signature !== "") {
      obj.signature = message.signature;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<WalletToEncDerivedKey>, I>>(base?: I): WalletToEncDerivedKey {
    return WalletToEncDerivedKey.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<WalletToEncDerivedKey>, I>>(object: I): WalletToEncDerivedKey {
    const message = createBaseWalletToEncDerivedKey();
    message.encDerivedPrivKey = object.encDerivedPrivKey ?? "";
    message.signature = object.signature ?? "";
    return message;
  },
};

function createBaseInitDid(): InitDid {
  return { masterPubKey: "", derivedKeyIndex: 0, derivedPubKey: "", walletToEncDerivedKey: {} };
}

export const InitDid = {
  encode(message: InitDid, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.masterPubKey !== "") {
      writer.uint32(10).string(message.masterPubKey);
    }
    if (message.derivedKeyIndex !== 0) {
      writer.uint32(16).uint32(message.derivedKeyIndex);
    }
    if (message.derivedPubKey !== "") {
      writer.uint32(26).string(message.derivedPubKey);
    }
    Object.entries(message.walletToEncDerivedKey).forEach(([key, value]) => {
      InitDid_WalletToEncDerivedKeyEntry.encode({ key: key as any, value }, writer.uint32(34).fork()).join();
    });
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitDid {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitDid();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.masterPubKey = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.derivedKeyIndex = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.derivedPubKey = reader.string();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          const entry4 = InitDid_WalletToEncDerivedKeyEntry.decode(reader, reader.uint32());
          if (entry4.value !== undefined) {
            message.walletToEncDerivedKey[entry4.key] = entry4.value;
          }
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitDid {
    return {
      masterPubKey: isSet(object.masterPubKey) ? globalThis.String(object.masterPubKey) : "",
      derivedKeyIndex: isSet(object.derivedKeyIndex) ? globalThis.Number(object.derivedKeyIndex) : 0,
      derivedPubKey: isSet(object.derivedPubKey) ? globalThis.String(object.derivedPubKey) : "",
      walletToEncDerivedKey: isObject(object.walletToEncDerivedKey)
        ? Object.entries(object.walletToEncDerivedKey).reduce<{ [key: string]: WalletToEncDerivedKey }>(
          (acc, [key, value]) => {
            acc[key] = WalletToEncDerivedKey.fromJSON(value);
            return acc;
          },
          {},
        )
        : {},
    };
  },

  toJSON(message: InitDid): unknown {
    const obj: any = {};
    if (message.masterPubKey !== "") {
      obj.masterPubKey = message.masterPubKey;
    }
    if (message.derivedKeyIndex !== 0) {
      obj.derivedKeyIndex = Math.round(message.derivedKeyIndex);
    }
    if (message.derivedPubKey !== "") {
      obj.derivedPubKey = message.derivedPubKey;
    }
    if (message.walletToEncDerivedKey) {
      const entries = Object.entries(message.walletToEncDerivedKey);
      if (entries.length > 0) {
        obj.walletToEncDerivedKey = {};
        entries.forEach(([k, v]) => {
          obj.walletToEncDerivedKey[k] = WalletToEncDerivedKey.toJSON(v);
        });
      }
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitDid>, I>>(base?: I): InitDid {
    return InitDid.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitDid>, I>>(object: I): InitDid {
    const message = createBaseInitDid();
    message.masterPubKey = object.masterPubKey ?? "";
    message.derivedKeyIndex = object.derivedKeyIndex ?? 0;
    message.derivedPubKey = object.derivedPubKey ?? "";
    message.walletToEncDerivedKey = Object.entries(object.walletToEncDerivedKey ?? {}).reduce<
      { [key: string]: WalletToEncDerivedKey }
    >((acc, [key, value]) => {
      if (value !== undefined) {
        acc[key] = WalletToEncDerivedKey.fromPartial(value);
      }
      return acc;
    }, {});
    return message;
  },
};

function createBaseInitDid_WalletToEncDerivedKeyEntry(): InitDid_WalletToEncDerivedKeyEntry {
  return { key: "", value: undefined };
}

export const InitDid_WalletToEncDerivedKeyEntry = {
  encode(message: InitDid_WalletToEncDerivedKeyEntry, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.key !== "") {
      writer.uint32(10).string(message.key);
    }
    if (message.value !== undefined) {
      WalletToEncDerivedKey.encode(message.value, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): InitDid_WalletToEncDerivedKeyEntry {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseInitDid_WalletToEncDerivedKeyEntry();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.key = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.value = WalletToEncDerivedKey.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): InitDid_WalletToEncDerivedKeyEntry {
    return {
      key: isSet(object.key) ? globalThis.String(object.key) : "",
      value: isSet(object.value) ? WalletToEncDerivedKey.fromJSON(object.value) : undefined,
    };
  },

  toJSON(message: InitDid_WalletToEncDerivedKeyEntry): unknown {
    const obj: any = {};
    if (message.key !== "") {
      obj.key = message.key;
    }
    if (message.value !== undefined) {
      obj.value = WalletToEncDerivedKey.toJSON(message.value);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<InitDid_WalletToEncDerivedKeyEntry>, I>>(
    base?: I,
  ): InitDid_WalletToEncDerivedKeyEntry {
    return InitDid_WalletToEncDerivedKeyEntry.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<InitDid_WalletToEncDerivedKeyEntry>, I>>(
    object: I,
  ): InitDid_WalletToEncDerivedKeyEntry {
    const message = createBaseInitDid_WalletToEncDerivedKeyEntry();
    message.key = object.key ?? "";
    message.value = (object.value !== undefined && object.value !== null)
      ? WalletToEncDerivedKey.fromPartial(object.value)
      : undefined;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}
